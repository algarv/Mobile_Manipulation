
Mobile Manipulation

These four functions generate a simulation of a realistic trajectory for a pick and place task.

The best example shows the robot smoothly following a path to pick up an object and place it in its final configuration without overshoot. The
overshoot example demonstrates signficant jitter in the beginning, and an overshoot before the initial grab while the error is still reaching a 
steady state. Finally, the new task example shows the robot smoothly accomplishing the task with the block further apart.

TrajectoryGenerator
    Outputs a series of end effector configurations to travel to the first block location, grasp the block, and place it at 
    the final block location.

FeedbackControl
    Applies proportional and integral controls given the actual configuration and the current and following target configurations. Error
    is calculated as the matrix log of the product of the inverse of the actual robot configuration with the planned configuration, which is
    then integrated by adding the resulting error multiplied by the time step to the saved sum of the previous errors. The feedforward twist is
    calculated as the inverse of the reference end effector twist multiplied by the following target end effecotr configuration. The twist 
    is then tranformed to the end effector frame by multiplying it by the adjoint of the product of the inverse of the current configuration
    and the reference configuration. The proportional and integral terms are then added to produce an updated end effector twist. The function 
    returns the twist expressed in the end effector frame that can be converted to joint velocities using the end effector jacobian.

NextState
    Takes in the current robot configuration and joint velocities to calculate the robot configuration at the next time step. New joint angles
    and wheel angles are calculated by multiplying the rotational velocity by time and adding the resulting change in theta to the current
    configuration angles. The chassis configuration is then updated using the formula for 4 mecanum-wheel robots with the change in theta value. 

Mobile_Manipulation
    Ties the three primary functions together. Takes in the desired trajectory generated by the TrajectoryGenerator function and applies the
    FeedbackControl function to create an updated end effector twist. Uses the end effector jacobian to find joint velocities, which are finally
    used by NextState to calculate the next trajectory. Finally, the actuall robot trajectories is saved in a CSV file for simulation in CoppeliaSim,
    and the error returned by the control function is plotted.



